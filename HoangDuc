

//#include <MPU6050.h>

#include <Servo.h>
#include <Kalman.h>
#include <Wire.h>
#include <I2Cdev.h>
#include <MPU6050.h>
MPU6050 CBgoc;
Kalman kalmanX;
   //cam bien mpu 6050
int16_t accX, accY, accZ;
int16_t tempRaw;
int16_t gyroX, gyroY, gyroZ;
float accXangle;
float gyroXangel;
float kalAngelX;
unsigned long timer;
uint8_t i2cData[14];
float CurrentAngle;
  // MOTOR
int AIN1 = 4;
int AIN2 = 5;
int BIN1 = 6;
int BIN2 = 7;
int CIN1 = 9;
int CIN2 = 10;
int speed;
float e_sat = 0, e_reset = 0;
  // PID
float Ti, Td, Kb;
const float Kp = 26.2;//  25.5-27-      26.2
const float Ki = 0.01;//                0.01
const float Kd = 0.8;//   0 -  0.8
float pTerm, iTerm, dTerm, integrated_error, last_error, error, last_dTerm, last_iTerm = 0;
#define runEvery(t) for (static typeof(t) _lasttime;(typeof(t))((typeof(t))millis() - _lasttime) > (t);_lasttime += (t))
void setup()
{
  pinMode(AIN1, OUTPUT);
  pinMode(AIN2, OUTPUT);
  pinMode(BIN1, OUTPUT);
  pinMode(BIN2, OUTPUT);
  pinMode(CIN2, OUTPUT);
  Serial.begin(9600);
  Wire.begin();
  i2cData[0] = 7; // Set the sample rate to 1000Hz - 8kHz/(7+1) = 1000Hz
  i2cData[1] = 0x00; // Disable FSYNC and set 260 Hz Acc filtering, 256 Hz Gyro filtering, 8 KHz sampling
  i2cData[2] = 0x00;
  i2cData[3] = 0x00;
  while (i2cWrite(0x19, i2cData, 4, false));
  while (i2cWrite(0x6B, 0x01, true));
  while (i2cRead(0x75, i2cData, 1));

  //Kalman filter
  while (i2cRead(0x3B, i2cData, 6));
  accX = ((i2cData[0] << 8) | i2cData[1]);
  accY = ((i2cData[2] << 8) | i2cData[3]);
  accZ = ((i2cData[4] << 8) | i2cData[5]);
  accXangle = (atan2(accY, accZ) + PI) * RAD_TO_DEG;
  kalmanX.setAngle(accXangle);
  gyroXangel = accXangle;
  timer = micros();
  //PID
  Ti = Kp / Ki;               //anti-windup parameter
  Td = Kd / Kp;               //anti-windup parameter
  Kb = 1 / (sqrt(Ti * Td));   //
  
}

void loop()
{
  
  runEvery(10)
  {
    dof();
    Serial.println(CurrentAngle);
        if (CurrentAngle <= 179 && CurrentAngle >= 178.75)
    {
      stop();
    }
    else
    {
      if (CurrentAngle < 270 && CurrentAngle > 90)
      {
        Pid();
        Motors();
      }
      else
      {
        stop();
      }
    }
  }
}
void Motors()
{
  if (speed > 0)
  {
    analogWrite(CIN1, speed);
    digitalWrite(AIN1, LOW);
    digitalWrite(AIN2, HIGH);
    analogWrite(CIN2, speed);
    digitalWrite(BIN1, LOW);
    digitalWrite(BIN2, HIGH);
  }
  else
  {
    speed = map(speed, 0, -255, 0, 255);
    analogWrite(CIN1, speed);
    digitalWrite(AIN1, HIGH);
    digitalWrite(AIN2, LOW);
    analogWrite(CIN2, speed);
    digitalWrite(BIN1, HIGH);
    digitalWrite(BIN2, LOW);
  }
}
void stop()
{
  speed = map(speed, 0, -150, 0, 150);
  analogWrite(CIN1, speed);
  digitalWrite(AIN1, LOW);
  digitalWrite(AIN2, HIGH);
  analogWrite(CIN2, speed);
  digitalWrite(BIN1, LOW);
  digitalWrite(BIN2, HIGH);
}
void Pid()
{
  error = 178.85 - CurrentAngle;  // 180 = level
  pTerm = Kp * error;
  iTerm = last_iTerm + Ki*error*0.01 + Kb*0.01*e_reset;
          //iTerm = last_iTerm + Ki * error * 0.01;
  dTerm = 0.2*last_dTerm+(Kd*(error-last_error))/(0.0125);
          //dTerm = Kd * (error - last_error) / 0.015;
  last_iTerm = iTerm;
  last_dTerm = dTerm;
  last_error = error;
  speed = constrain(( pTerm + iTerm + dTerm), -255, 255);
  if (speed > 255) e_sat = 255;
  else if (speed <- 255) e_sat = -255;
  else e_sat = speed;
  e_reset = e_sat-speed;
}
void dof()
{
  while (i2cRead(0x3B, i2cData, 14));
  accX = ((i2cData[0] << 8) | i2cData[1]);
  accY = ((i2cData[2] << 8) | i2cData[3]);
  accZ = ((i2cData[4] << 8) | i2cData[5]);
  tempRaw = ((i2cData[6] << 8) | i2cData[7]);
  gyroX = ((i2cData[8] << 8) | i2cData[9]);
  gyroY = ((i2cData[10] << 8) | i2cData[11]);
  gyroZ = ((i2cData[12] << 8) | i2cData[13]);
  accXangle = (atan2(accY, accZ) + PI) * RAD_TO_DEG;
  double gyroXrate = (double)gyroX / 131.0;
  CurrentAngle = kalmanX.getAngle(accXangle, gyroXrate, (double)(micros() - timer) / 1000000);
  timer = micros();
}
